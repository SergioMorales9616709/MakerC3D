package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal LOG_Y, LOG_O, LOG_NEG;
terminal IGUAL, DIFERENTE, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;

nonterminal NodoC3D inicial, expresion,relexp,combexp,andexp;

precedence left LOG_O;
precedence left LOG_Y;
precedence left LOG_NEG;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 
precedence nonassoc IGUAL, DIFERENTE, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence nonassoc PAR_IZQ, PAR_DER;

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} combexp:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D(exp.getC3d());
                        if(exp.getCad() != null && exp.getCad() != "" ){
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        }else{
                            ControlC3D.agregarC3D("\n"+exp.getLv()+":\n");
                            ControlC3D.agregarC3D(exp.getLf()+":\n\n");
                            ControlC3D.agregarC3D("//Etiqueta(s) de verdadero: " + exp.getLv());
                            ControlC3D.agregarC3D("\n//Etiqueta(s) de falso: " + exp.getLf());
                        }
                    :};

combexp     ::= combexp:izq LOG_O andexp:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + izq.getCad() + izq.getLf() + ":\n" + der.getC3d() + der.getCad();
                        System.out.println("OR -> izq.lv:"+izq.getLv()+" izq.lv:"+izq.getLf()+"der.lv:"+der.getLv()+" der.lv:"+der.getLf());
                        RESULT = new NodoC3D(null,izq.getLv()+","+der.getLv(), der.getLf(),c3d);
                    :}
            |   andexp:exp
                    {: RESULT = exp; :}                        
                ;
andexp      ::= andexp:izq LOG_Y relexp:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + izq.getCad() + izq.getLv() + ":\n" + der.getC3d() + der.getCad();
                        System.out.println("AND -> izq.lv:"+izq.getLv()+" izq.lv:"+izq.getLf()+"der.lv:"+der.getLv()+" der.lv:"+der.getLf());
                        RESULT = new NodoC3D(null,der.getLv(),izq.getLf()+","+der.getLf(),c3d);
                    :}
            |   relexp:exp
                    {: RESULT = exp; :}                        
                ;

relexp      ::= expresion:izq MENOR expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " < " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:izq MAYOR expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " > " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:izq IGUAL expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " == " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:izq DIFERENTE expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " != " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:izq MAYORIGUAL expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " >= " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:izq MENORIGUAL expresion:der
                    {: 
                        String lv = ControlC3D.generarEtiqueta();
                        String lf = ControlC3D.generarEtiqueta();
                        String c3d = izq.getC3d() + der.getC3d() + "IF (" + izq.getCad() + " <= " + der.getCad() + ") GOTO " + lv + "\nGOTO "+lf+"\n";
                        RESULT = new NodoC3D(null,lv,lf,c3d);
                    :}
            |   expresion:exp
                    {: RESULT = exp; :}                        
                ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,izq.getC3d()+der.getC3d()+c3d);
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,izq.getC3d()+der.getC3d()+c3d);
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,izq.getC3d()+der.getC3d()+c3d);
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,izq.getC3d()+der.getC3d()+c3d);
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,izq.getC3d()+der.getC3d()+c3d);
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,null,null,exp.getC3d()+c3d);
                    :}
            |   LOG_NEG expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = not " + exp.getCad() + ";\n";
                        RESULT = new NodoC3D(temp,exp.getLf(),exp.getLv(),c3d);
                    :}
            |   PAR_IZQ combexp:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;